forward <- function(formula, data, test, method = NULL, family = NULL,
sort = NULL, rev = FALSE, max_ints = 2,
complete_cases = FALSE, ...){
### Sorting variables
rev_sorts <- c("n", "concordance", "lrt_chisq")
full_set_sorts <- c("lrt_df", "lrt_chisq", "lrt_p")
### Complete cases based on control variable and sort variable
if(complete_cases){
data <- data[complete.cases(data), ]
} else if(!is.null(sort)){
if(sort %in% full_set_sorts){
data <- data[complete.cases(data), ]
}
}
### model0
model0 <- coxph(formula(formula), data = data, ...)
vars_test <- vars_as_vect(test)
model0_vars <- get_rhs(model0)
model0_ints <- get_interactions(model0_vars, max_ints)
vars_test <- vars_test[!vars_test %in% vars_as_vect(model0_vars)]
vars_test <- c("1", vars_test, model0_ints)
lhs <- get_lhs(formula)
label <- vector()
n <- vector()
aic <- vector()
bic <- vector()
conc <- vector()
models <- list()
lrt_m0 <- list()
lrt_df_m0 <- vector()
lrt_chisq_m0 <- vector()
lrt_p_m0 <- vector()
lrt_ps_m0 <- vector()
for(i in 1:length(vars_test)){
if(vars_test[i] == "1"){
label[i] <- sub("     ", "", Reduce(paste, deparse(formula(model0))))
new.model <- model0
models[[i]] <- new.model
} else {
label[i] <- paste(lhs, "~", vars_as_str(model0_vars), "+", vars_test[i])
new.model <- coxph(as.formula(label[i]), data)
models[[i]] <- new.model
}
n[i] <- new.model$n
aic[i] <- AIC(new.model)
bic[i] <- BIC(new.model)
conc[i] <- concordance(new.model)$concordance
if(model0$n == new.model$n){
new.lrt <- lrtest(model0, new.model)
lrt_m0[[i]] <- new.lrt
lrt_df_m0[i] <- new.lrt[2, 3]
lrt_chisq_m0[i] <- new.lrt[2, 4]
lrt_p_m0[i] <- new.lrt[2, 5]
lrt_ps_m0[i] <- gtools::stars.pval(new.lrt[2, 5])
} else {
lrt_df_m0[i] <- NA
lrt_chisq_m0[i] <- NA
lrt_p_m0[i] <- NA
lrt_ps_m0[i] <- NA
}
}
names(models) <- label
ic <- data.frame(list("Model" = label,
"n" = n,
"aic" = aic,
"bic" = bic,
"concordance" = conc,
"lrt_df" = lrt_df_m0,
"lrt_chisq" = lrt_chisq_m0,
"lrt_p" = lrt_p_m0,
"sig" = lrt_ps_m0))
if(!is.null(sort)){
if(sort %in% rev_sorts){
rev <- TRUE
}
ic <- ic[order(ic[, sort]),]
}
if(rev){
ic <- ic[nrow(ic):1, ]
}
rtn <- list("ic" = ic,
"test_models" = models,
"model" = models[[1]],
"lrt" = lrt_m0)
attr(rtn, "class") <- c("fs")
rtn
}
??gtools
use_mit_licence()
udevtools::se_mit_licence()
devtools::use_mit_licence()
usethis::use_mit_licence()
install.packages("usethis")
install.packages("usethis")
library(usethis)
use_mit_license()
check()
devtools:check()
instal_packages("devtools")
install_packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
document()
document()
document()
document()
document()
document()
document()
load_all()
library(selectionr)
library(devtools)
load_all()
load_all()
?forward()
library(selectionr)
devtools::creat()
devtools::create()
?devtools::create()
devtools::create(path = "C:\\Users\\jackh\\Documents\\Projects\\selectionr")
remove.packages("selectionr")
devtools::create(path = "C:\\Users\\jackh\\Documents\\Projects\\selectionr")
document()
library(devtools)
document()
document()
document()
getwd()
setwd("..")
install("selectionr")
library(selectionr)
?select
devtools::install_github("jackhall1996/selectionr")
devtools::install_github("jackhall1996/selectionr")
?select.glm
?glm
document()
devtools:use_mit_licence()
devtools::use_mit_licence()
usethis::use_mit_licence()
usethis::use_mit_license()
#' @param data The dataset to use
#' @param test A vector of test variables
#' @param sort Sort output by this variable
#' @param rev Reverse output
#' @param max_ints Maximum level of interactions
#' @param complete_cases Only include complete cases of data
#' @param ... ...
#'
#' @return An fs object
#' @import lmtest survival dplyr gtools stringr
?glm
?lm
loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
loadNamespace(c(lib.loc, .libPaths()))
loadNamespace(c(lib.loc(), .libPaths()))
lib.loc()
.libPaths()
forward_select <- function(formula, data, test, method = NULL, family = NULL,
sort = NULL, rev = FALSE, max_ints = 2,
complete_cases = FALSE, ...){
if(method == "lm"){
forward_select.lm(formula, data, test,
sort, rev, max_ints,
complete_cases, ...)
} else if(method == "glm"){
forward_select.glm(formula, data, test, family,
sort, rev, max_ints,
complete_cases, ...)
} else if (method == "coxph"){
forward_select.coxph(formula, data, test,
sort, rev, max_ints,
complete_cases, ...)
} else {
print("Error: invalid 'method'. Please try with 'lm', 'glm' or 'coxph'.")
}
}
forward_select <- function(formula, data, test, method = NULL, family = NULL,
sort = NULL, rev = FALSE, max_ints = 2,
complete_cases = FALSE, ...){
if(method == "lm"){
forward_select.lm(formula, data, test,
sort, rev, max_ints,
complete_cases, ...)
} else if(method == "glm"){
forward_select.glm(formula, data, test, family,
sort, rev, max_ints,
complete_cases, ...)
} else if (method == "coxph"){
forward_select.coxph(formula, data, test,
sort, rev, max_ints,
complete_cases, ...)
} else {
print("Error: invalid 'method'. Please try with 'lm', 'glm' or 'coxph'.")
}
}
getAnywhere()
getAnywhere(forward_select)
?glm
document()
